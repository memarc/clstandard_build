
!2G:evaluation!!3--1
!2G:binding!!3--1
!2G:environment!!3--1
!2G:namespace!!3--1
!2G:global environment!!3--1
!2G:dynamic environment!!3--2
!2G:lexical environment!!3--2
!2G:null lexical environment!!3--3
!2G:environment object!!3--3
!2G:shadow!!3--11
!2G:compiler!!3--14
!2G:compiler!!3--14
!2G:compiled code!!3--14
!2G:implicit compilation!!3--14
!2G:literal object!!3--14
!2G:coalesce!!3--14
!2G:minimal compilation!!3--14
!2G:process!!3--14
!2G:further compilation!!3--14
!2G:startup environment!!3--14
!2G:compilation environment!!3--14
!2G:evaluation environment!!3--14
!2G:run-time environment!!3--15
!2G:compile time!!3--15
!2G:compile-time definition!!3--15
!2G:run time!!3--15
!2G:run-time definition!!3--15
!2G:run-time compiler!!3--15
!2G:compiler macro!!3--18
!2G:macro!!3--18
!2G:symbol macro!!3--18
!2R:macrolet!!3--18
!2R:symbol-macrolet!!3--18
!2R:load-time-value!!3--18
!2R:compile!!3--18
!2R:compile-file!!3--18
!2R:eval-when!!3--20
!2G:externalizable object!!3--23
!2G:similar!!3--23
!2G:externalizable object!!3--23
!2G:declaration!!3--29
!2G:local declaration!!3--29
!2G:global declaration!!3--29
!2G:proclamation!!3--29
!2R:declaration!!3--29
!2R:notinline!!3--29
!2R:safety!!3--29
!2R:special!!3--29
!2G:declaration specifier!!3--29
!2G:declaration identifier!!3--29
!2G:bound declaration!!3--30
!2G:free declaration!!3--30
!2G:lambda list!!3--33
!2G:ordinary lambda list!!3--33
!2R:\&optional!!3--35
!2R:\&rest!!3--35
!2R:\&key!!3--35
!2R:\&allow-other-keys!!3--35
!2R:\&aux!!3--37
!2G:generic function lambda list!!3--39
!2G:specialized lambda list!!3--40
!2G:macro lambda list!!3--41
!2R:\&body!!3--42
!2R:\&whole!!3--42
!2R:\&environment!!3--42
!2G:destructuring lambda list!!3--45
!2G:boa lambda list!!3--46
!2G:defsetf lambda list!!3--47
!2G:deftype lambda list!!3--48
!2G:define-modify-macro lambda list!!3--48
!2G:define-method-combination arguments lambda list!!3--48
!2G:safe call!!3--50
!2G:unsafe call!!3--51
!2R:lambda!!3--56
!2R:lambda!!3--56
!2R:compile!!3--57
!2R:eval!!3--59
!2R:eval-when!!3--60
!2K:compile-toplevel!!3--60
!2K:load-toplevel!!3--60
!2K:execute!!3--60
!2R:compile!!3--60
!2R:load!!3--60
!2R:eval!!3--60
!2R:load-time-value!!3--63
!2T:order of evaluation!!3--63
!2T:evaluation order!!3--63
!2R:quote!!3--65
!2R:compiler-macro-function!!3--66
!2R:define-compiler-macro!!3--67
!2R:defmacro!!3--70
!2R:macro-function!!3--73
!2R:macroexpand, macroexpand-1!!3--75
!2R:define-symbol-macro!!3--77
!2R:symbol-macrolet!!3--79
!2R:*macroexpand-hook*!!3--80
!2R:proclaim!!3--81
!2R:declaim!!3--83
!2R:declare!!3--83
!2R:ignore, ignorable!!3--85
!2R:dynamic-extent!!3--86
!2R:type!!3--90
!2R:inline, notinline!!3--93
!2R:ftype!!3--95
!2R:declaration!!3--96
!2R:optimize!!3--97
!2R:compilation-speed!!3--97
!2R:debug!!3--97
!2R:safety!!3--97
!2R:space!!3--97
!2R:speed!!3--97
!2R:special!!3--98
!2R:locally!!3--100
!2R:the!!3--102
!2R:special-operator-p!!3--103
!2R:constantp!!3--104
